// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package pbft is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	Message
	Request
	PrePrepare
	Prepare
	Commit
	BlockInfo
	Checkpoint
	WantViewChange
	ViewChange
	PQset
	NewView
	FetchRequestBatch
	RequestBatch
	BatchMessage
	Metadata
*/
package pbft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Payload:
	//	*Message_RequestBatch
	//	*Message_PrePrepare
	//	*Message_Prepare
	//	*Message_Commit
	//	*Message_Checkpoint
	//	*Message_ViewChange
	//	*Message_NewView
	//	*Message_FetchRequestBatch
	//	*Message_ReturnRequestBatch
	//	*Message_WantViewChange
	Payload isMessage_Payload `protobuf_oneof:"payload"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Payload interface {
	isMessage_Payload()
}

type Message_RequestBatch struct {
	RequestBatch *RequestBatch `protobuf:"bytes,1,opt,name=request_batch,json=requestBatch,oneof"`
}
type Message_PrePrepare struct {
	PrePrepare *PrePrepare `protobuf:"bytes,2,opt,name=pre_prepare,json=prePrepare,oneof"`
}
type Message_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,3,opt,name=prepare,oneof"`
}
type Message_Commit struct {
	Commit *Commit `protobuf:"bytes,4,opt,name=commit,oneof"`
}
type Message_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,5,opt,name=checkpoint,oneof"`
}
type Message_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,6,opt,name=view_change,json=viewChange,oneof"`
}
type Message_NewView struct {
	NewView *NewView `protobuf:"bytes,7,opt,name=new_view,json=newView,oneof"`
}
type Message_FetchRequestBatch struct {
	FetchRequestBatch *FetchRequestBatch `protobuf:"bytes,8,opt,name=fetch_request_batch,json=fetchRequestBatch,oneof"`
}
type Message_ReturnRequestBatch struct {
	ReturnRequestBatch *RequestBatch `protobuf:"bytes,9,opt,name=return_request_batch,json=returnRequestBatch,oneof"`
}
type Message_WantViewChange struct {
	WantViewChange *WantViewChange `protobuf:"bytes,10,opt,name=want_view_change,json=wantViewChange,oneof"`
}

func (*Message_RequestBatch) isMessage_Payload()       {}
func (*Message_PrePrepare) isMessage_Payload()         {}
func (*Message_Prepare) isMessage_Payload()            {}
func (*Message_Commit) isMessage_Payload()             {}
func (*Message_Checkpoint) isMessage_Payload()         {}
func (*Message_ViewChange) isMessage_Payload()         {}
func (*Message_NewView) isMessage_Payload()            {}
func (*Message_FetchRequestBatch) isMessage_Payload()  {}
func (*Message_ReturnRequestBatch) isMessage_Payload() {}
func (*Message_WantViewChange) isMessage_Payload()     {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetRequestBatch() *RequestBatch {
	if x, ok := m.GetPayload().(*Message_RequestBatch); ok {
		return x.RequestBatch
	}
	return nil
}

func (m *Message) GetPrePrepare() *PrePrepare {
	if x, ok := m.GetPayload().(*Message_PrePrepare); ok {
		return x.PrePrepare
	}
	return nil
}

func (m *Message) GetPrepare() *Prepare {
	if x, ok := m.GetPayload().(*Message_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Message) GetCommit() *Commit {
	if x, ok := m.GetPayload().(*Message_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Message) GetCheckpoint() *Checkpoint {
	if x, ok := m.GetPayload().(*Message_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (m *Message) GetViewChange() *ViewChange {
	if x, ok := m.GetPayload().(*Message_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *Message) GetNewView() *NewView {
	if x, ok := m.GetPayload().(*Message_NewView); ok {
		return x.NewView
	}
	return nil
}

func (m *Message) GetFetchRequestBatch() *FetchRequestBatch {
	if x, ok := m.GetPayload().(*Message_FetchRequestBatch); ok {
		return x.FetchRequestBatch
	}
	return nil
}

func (m *Message) GetReturnRequestBatch() *RequestBatch {
	if x, ok := m.GetPayload().(*Message_ReturnRequestBatch); ok {
		return x.ReturnRequestBatch
	}
	return nil
}

func (m *Message) GetWantViewChange() *WantViewChange {
	if x, ok := m.GetPayload().(*Message_WantViewChange); ok {
		return x.WantViewChange
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_RequestBatch)(nil),
		(*Message_PrePrepare)(nil),
		(*Message_Prepare)(nil),
		(*Message_Commit)(nil),
		(*Message_Checkpoint)(nil),
		(*Message_ViewChange)(nil),
		(*Message_NewView)(nil),
		(*Message_FetchRequestBatch)(nil),
		(*Message_ReturnRequestBatch)(nil),
		(*Message_WantViewChange)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// payload
	switch x := m.Payload.(type) {
	case *Message_RequestBatch:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestBatch); err != nil {
			return err
		}
	case *Message_PrePrepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrePrepare); err != nil {
			return err
		}
	case *Message_Prepare:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Message_Commit:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Message_Checkpoint:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkpoint); err != nil {
			return err
		}
	case *Message_ViewChange:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViewChange); err != nil {
			return err
		}
	case *Message_NewView:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewView); err != nil {
			return err
		}
	case *Message_FetchRequestBatch:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchRequestBatch); err != nil {
			return err
		}
	case *Message_ReturnRequestBatch:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnRequestBatch); err != nil {
			return err
		}
	case *Message_WantViewChange:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WantViewChange); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 1: // payload.request_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_RequestBatch{msg}
		return true, err
	case 2: // payload.pre_prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrePrepare)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_PrePrepare{msg}
		return true, err
	case 3: // payload.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Prepare{msg}
		return true, err
	case 4: // payload.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Commit{msg}
		return true, err
	case 5: // payload.checkpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Checkpoint)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Checkpoint{msg}
		return true, err
	case 6: // payload.view_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViewChange)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_ViewChange{msg}
		return true, err
	case 7: // payload.new_view
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewView)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_NewView{msg}
		return true, err
	case 8: // payload.fetch_request_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchRequestBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_FetchRequestBatch{msg}
		return true, err
	case 9: // payload.return_request_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_ReturnRequestBatch{msg}
		return true, err
	case 10: // payload.want_view_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WantViewChange)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_WantViewChange{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// payload
	switch x := m.Payload.(type) {
	case *Message_RequestBatch:
		s := proto.Size(x.RequestBatch)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PrePrepare:
		s := proto.Size(x.PrePrepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Checkpoint:
		s := proto.Size(x.Checkpoint)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ViewChange:
		s := proto.Size(x.ViewChange)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_NewView:
		s := proto.Size(x.NewView)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_FetchRequestBatch:
		s := proto.Size(x.FetchRequestBatch)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ReturnRequestBatch:
		s := proto.Size(x.ReturnRequestBatch)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_WantViewChange:
		s := proto.Size(x.WantViewChange)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Request struct {
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte                     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ReplicaId uint64                     `protobuf:"varint,3,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Signature []byte                     `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Request) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Request) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PrePrepare struct {
	View           uint64        `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64        `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string        `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	RequestBatch   *RequestBatch `protobuf:"bytes,4,opt,name=request_batch,json=requestBatch" json:"request_batch,omitempty"`
	ReplicaId      uint64        `protobuf:"varint,5,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Attestation    []byte        `protobuf:"bytes,6,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *PrePrepare) Reset()                    { *m = PrePrepare{} }
func (m *PrePrepare) String() string            { return proto.CompactTextString(m) }
func (*PrePrepare) ProtoMessage()               {}
func (*PrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PrePrepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrePrepare) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *PrePrepare) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *PrePrepare) GetRequestBatch() *RequestBatch {
	if m != nil {
		return m.RequestBatch
	}
	return nil
}

func (m *PrePrepare) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *PrePrepare) GetAttestation() []byte {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type Prepare struct {
	View           uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Attestation    []byte `protobuf:"bytes,5,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Prepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Prepare) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Prepare) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *Prepare) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Prepare) GetAttestation() []byte {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type Commit struct {
	View           uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Attestation    []byte `protobuf:"bytes,6,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Commit) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Commit) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Commit) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *Commit) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Commit) GetAttestation() []byte {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type BlockInfo struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockHash   []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BlockInfo) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *BlockInfo) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type Checkpoint struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	ReplicaId      uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Checkpoint) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Checkpoint) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Checkpoint) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type WantViewChange struct {
	View  uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Id    uint64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *WantViewChange) Reset()                    { *m = WantViewChange{} }
func (m *WantViewChange) String() string            { return proto.CompactTextString(m) }
func (*WantViewChange) ProtoMessage()               {}
func (*WantViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WantViewChange) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *WantViewChange) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *WantViewChange) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ViewChange struct {
	View        uint64            `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	H           uint64            `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Cset        []*ViewChange_C   `protobuf:"bytes,3,rep,name=cset" json:"cset,omitempty"`
	Pset        []*ViewChange_PQ  `protobuf:"bytes,4,rep,name=pset" json:"pset,omitempty"`
	Qset        []*ViewChange_PQ  `protobuf:"bytes,5,rep,name=qset" json:"qset,omitempty"`
	Bset        []*ViewChange_Att `protobuf:"bytes,8,rep,name=bset" json:"bset,omitempty"`
	Wset        []*WantViewChange `protobuf:"bytes,11,rep,name=wset" json:"wset,omitempty"`
	ReplicaId   uint64            `protobuf:"varint,6,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Signature   []byte            `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	Attestation []byte            `protobuf:"bytes,10,opt,name=attestation,proto3" json:"attestation,omitempty"`
	OldView     uint64            `protobuf:"varint,12,opt,name=old_view,json=oldView" json:"old_view,omitempty"`
}

func (m *ViewChange) Reset()                    { *m = ViewChange{} }
func (m *ViewChange) String() string            { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()               {}
func (*ViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ViewChange) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ViewChange) GetH() uint64 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *ViewChange) GetCset() []*ViewChange_C {
	if m != nil {
		return m.Cset
	}
	return nil
}

func (m *ViewChange) GetPset() []*ViewChange_PQ {
	if m != nil {
		return m.Pset
	}
	return nil
}

func (m *ViewChange) GetQset() []*ViewChange_PQ {
	if m != nil {
		return m.Qset
	}
	return nil
}

func (m *ViewChange) GetBset() []*ViewChange_Att {
	if m != nil {
		return m.Bset
	}
	return nil
}

func (m *ViewChange) GetWset() []*WantViewChange {
	if m != nil {
		return m.Wset
	}
	return nil
}

func (m *ViewChange) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *ViewChange) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ViewChange) GetAttestation() []byte {
	if m != nil {
		return m.Attestation
	}
	return nil
}

func (m *ViewChange) GetOldView() uint64 {
	if m != nil {
		return m.OldView
	}
	return 0
}

type ViewChange_C struct {
	Checkpoint *Checkpoint `protobuf:"bytes,1,opt,name=checkpoint" json:"checkpoint,omitempty"`
}

func (m *ViewChange_C) Reset()                    { *m = ViewChange_C{} }
func (m *ViewChange_C) String() string            { return proto.CompactTextString(m) }
func (*ViewChange_C) ProtoMessage()               {}
func (*ViewChange_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *ViewChange_C) GetCheckpoint() *Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

type ViewChange_PQ struct {
	SeqNo       uint64     `protobuf:"varint,1,opt,name=seqNo" json:"seqNo,omitempty"`
	Prepare     []*Prepare `protobuf:"bytes,2,rep,name=prepare" json:"prepare,omitempty"`
	Commit      []*Commit  `protobuf:"bytes,3,rep,name=commit" json:"commit,omitempty"`
	H           []byte     `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	A           []byte     `protobuf:"bytes,5,opt,name=a,proto3" json:"a,omitempty"`
	BatchDigest string     `protobuf:"bytes,6,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	View        uint64     `protobuf:"varint,7,opt,name=view" json:"view,omitempty"`
}

func (m *ViewChange_PQ) Reset()                    { *m = ViewChange_PQ{} }
func (m *ViewChange_PQ) String() string            { return proto.CompactTextString(m) }
func (*ViewChange_PQ) ProtoMessage()               {}
func (*ViewChange_PQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

func (m *ViewChange_PQ) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *ViewChange_PQ) GetPrepare() []*Prepare {
	if m != nil {
		return m.Prepare
	}
	return nil
}

func (m *ViewChange_PQ) GetCommit() []*Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *ViewChange_PQ) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *ViewChange_PQ) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ViewChange_PQ) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *ViewChange_PQ) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

type ViewChange_Att struct {
	View        uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SeqNo       uint64 `protobuf:"varint,2,opt,name=seqNo" json:"seqNo,omitempty"`
	Attestation []byte `protobuf:"bytes,3,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *ViewChange_Att) Reset()                    { *m = ViewChange_Att{} }
func (m *ViewChange_Att) String() string            { return proto.CompactTextString(m) }
func (*ViewChange_Att) ProtoMessage()               {}
func (*ViewChange_Att) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 2} }

func (m *ViewChange_Att) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ViewChange_Att) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *ViewChange_Att) GetAttestation() []byte {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type PQset struct {
	Set []*ViewChange_PQ `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *PQset) Reset()                    { *m = PQset{} }
func (m *PQset) String() string            { return proto.CompactTextString(m) }
func (*PQset) ProtoMessage()               {}
func (*PQset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PQset) GetSet() []*ViewChange_PQ {
	if m != nil {
		return m.Set
	}
	return nil
}

type NewView struct {
	View        uint64            `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Vset        []*ViewChange     `protobuf:"bytes,2,rep,name=vset" json:"vset,omitempty"`
	Xset        map[uint64]string `protobuf:"bytes,3,rep,name=xset" json:"xset,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaId   uint64            `protobuf:"varint,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Attestation []byte            `protobuf:"bytes,5,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *NewView) Reset()                    { *m = NewView{} }
func (m *NewView) String() string            { return proto.CompactTextString(m) }
func (*NewView) ProtoMessage()               {}
func (*NewView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NewView) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NewView) GetVset() []*ViewChange {
	if m != nil {
		return m.Vset
	}
	return nil
}

func (m *NewView) GetXset() map[uint64]string {
	if m != nil {
		return m.Xset
	}
	return nil
}

func (m *NewView) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *NewView) GetAttestation() []byte {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type FetchRequestBatch struct {
	BatchDigest string `protobuf:"bytes,1,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId   uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *FetchRequestBatch) Reset()                    { *m = FetchRequestBatch{} }
func (m *FetchRequestBatch) String() string            { return proto.CompactTextString(m) }
func (*FetchRequestBatch) ProtoMessage()               {}
func (*FetchRequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FetchRequestBatch) GetBatchDigest() string {
	if m != nil {
		return m.BatchDigest
	}
	return ""
}

func (m *FetchRequestBatch) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

type RequestBatch struct {
	Batch []*Request `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
}

func (m *RequestBatch) Reset()                    { *m = RequestBatch{} }
func (m *RequestBatch) String() string            { return proto.CompactTextString(m) }
func (*RequestBatch) ProtoMessage()               {}
func (*RequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RequestBatch) GetBatch() []*Request {
	if m != nil {
		return m.Batch
	}
	return nil
}

type BatchMessage struct {
	// Types that are valid to be assigned to Payload:
	//	*BatchMessage_Request
	//	*BatchMessage_RequestBatch
	//	*BatchMessage_PbftMessage
	//	*BatchMessage_Complaint
	Payload isBatchMessage_Payload `protobuf_oneof:"payload"`
}

func (m *BatchMessage) Reset()                    { *m = BatchMessage{} }
func (m *BatchMessage) String() string            { return proto.CompactTextString(m) }
func (*BatchMessage) ProtoMessage()               {}
func (*BatchMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type isBatchMessage_Payload interface {
	isBatchMessage_Payload()
}

type BatchMessage_Request struct {
	Request *Request `protobuf:"bytes,1,opt,name=request,oneof"`
}
type BatchMessage_RequestBatch struct {
	RequestBatch *RequestBatch `protobuf:"bytes,2,opt,name=request_batch,json=requestBatch,oneof"`
}
type BatchMessage_PbftMessage struct {
	PbftMessage []byte `protobuf:"bytes,3,opt,name=pbft_message,json=pbftMessage,proto3,oneof"`
}
type BatchMessage_Complaint struct {
	Complaint *Request `protobuf:"bytes,4,opt,name=complaint,oneof"`
}

func (*BatchMessage_Request) isBatchMessage_Payload()      {}
func (*BatchMessage_RequestBatch) isBatchMessage_Payload() {}
func (*BatchMessage_PbftMessage) isBatchMessage_Payload()  {}
func (*BatchMessage_Complaint) isBatchMessage_Payload()    {}

func (m *BatchMessage) GetPayload() isBatchMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BatchMessage) GetRequest() *Request {
	if x, ok := m.GetPayload().(*BatchMessage_Request); ok {
		return x.Request
	}
	return nil
}

func (m *BatchMessage) GetRequestBatch() *RequestBatch {
	if x, ok := m.GetPayload().(*BatchMessage_RequestBatch); ok {
		return x.RequestBatch
	}
	return nil
}

func (m *BatchMessage) GetPbftMessage() []byte {
	if x, ok := m.GetPayload().(*BatchMessage_PbftMessage); ok {
		return x.PbftMessage
	}
	return nil
}

func (m *BatchMessage) GetComplaint() *Request {
	if x, ok := m.GetPayload().(*BatchMessage_Complaint); ok {
		return x.Complaint
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BatchMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BatchMessage_OneofMarshaler, _BatchMessage_OneofUnmarshaler, _BatchMessage_OneofSizer, []interface{}{
		(*BatchMessage_Request)(nil),
		(*BatchMessage_RequestBatch)(nil),
		(*BatchMessage_PbftMessage)(nil),
		(*BatchMessage_Complaint)(nil),
	}
}

func _BatchMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BatchMessage)
	// payload
	switch x := m.Payload.(type) {
	case *BatchMessage_Request:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *BatchMessage_RequestBatch:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestBatch); err != nil {
			return err
		}
	case *BatchMessage_PbftMessage:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.PbftMessage)
	case *BatchMessage_Complaint:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Complaint); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BatchMessage.Payload has unexpected type %T", x)
	}
	return nil
}

func _BatchMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BatchMessage)
	switch tag {
	case 1: // payload.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Payload = &BatchMessage_Request{msg}
		return true, err
	case 2: // payload.request_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &BatchMessage_RequestBatch{msg}
		return true, err
	case 3: // payload.pbft_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Payload = &BatchMessage_PbftMessage{x}
		return true, err
	case 4: // payload.complaint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Payload = &BatchMessage_Complaint{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BatchMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BatchMessage)
	// payload
	switch x := m.Payload.(type) {
	case *BatchMessage_Request:
		s := proto.Size(x.Request)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMessage_RequestBatch:
		s := proto.Size(x.RequestBatch)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMessage_PbftMessage:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PbftMessage)))
		n += len(x.PbftMessage)
	case *BatchMessage_Complaint:
		s := proto.Size(x.Complaint)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Metadata struct {
	SeqNo uint64 `protobuf:"varint,1,opt,name=seqNo" json:"seqNo,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Metadata) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "pbft.message")
	proto.RegisterType((*Request)(nil), "pbft.request")
	proto.RegisterType((*PrePrepare)(nil), "pbft.pre_prepare")
	proto.RegisterType((*Prepare)(nil), "pbft.prepare")
	proto.RegisterType((*Commit)(nil), "pbft.commit")
	proto.RegisterType((*BlockInfo)(nil), "pbft.block_info")
	proto.RegisterType((*Checkpoint)(nil), "pbft.checkpoint")
	proto.RegisterType((*WantViewChange)(nil), "pbft.want_view_change")
	proto.RegisterType((*ViewChange)(nil), "pbft.view_change")
	proto.RegisterType((*ViewChange_C)(nil), "pbft.view_change.C")
	proto.RegisterType((*ViewChange_PQ)(nil), "pbft.view_change.PQ")
	proto.RegisterType((*ViewChange_Att)(nil), "pbft.view_change.Att")
	proto.RegisterType((*PQset)(nil), "pbft.PQset")
	proto.RegisterType((*NewView)(nil), "pbft.new_view")
	proto.RegisterType((*FetchRequestBatch)(nil), "pbft.fetch_request_batch")
	proto.RegisterType((*RequestBatch)(nil), "pbft.request_batch")
	proto.RegisterType((*BatchMessage)(nil), "pbft.batch_message")
	proto.RegisterType((*Metadata)(nil), "pbft.metadata")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x76, 0xdb, 0xe3, 0x38, 0x53, 0x76, 0x42, 0xb6, 0x37, 0x20, 0xaf, 0xc5, 0x8a, 0xe0, 0x85,
	0xcd, 0x86, 0x1f, 0x07, 0x2d, 0x8b, 0x88, 0xf6, 0xb6, 0x09, 0x08, 0x23, 0x20, 0x4a, 0x5a, 0x68,
	0xe1, 0x66, 0xb5, 0xc7, 0x1d, 0xcf, 0x28, 0xf6, 0xcc, 0x64, 0xa6, 0x1d, 0x93, 0x57, 0xe1, 0x0d,
	0xe0, 0x19, 0x38, 0x73, 0xe0, 0xce, 0x3b, 0x70, 0xe1, 0x1d, 0x50, 0x57, 0xf7, 0xfc, 0x4f, 0xb2,
	0x48, 0x08, 0x69, 0x6f, 0x53, 0xd5, 0x5f, 0xd5, 0x7c, 0xd5, 0x55, 0xd5, 0x55, 0xb0, 0xbd, 0x14,
	0x71, 0xcc, 0xe7, 0x22, 0x1e, 0x85, 0x51, 0x20, 0x03, 0x6a, 0x85, 0xd3, 0x0b, 0x39, 0x78, 0x67,
	0x1e, 0x04, 0xf3, 0x85, 0x38, 0x44, 0xdd, 0x74, 0x75, 0x71, 0x28, 0xbd, 0xa5, 0x88, 0x25, 0x5f,
	0x86, 0x1a, 0x36, 0xfc, 0xc3, 0x82, 0x8e, 0xb1, 0xa4, 0xcf, 0x61, 0x2b, 0x12, 0x57, 0x2b, 0x11,
	0xcb, 0xc9, 0x94, 0x4b, 0xc7, 0xed, 0x93, 0x3d, 0xf2, 0xa4, 0xfb, 0xf4, 0xfe, 0x48, 0xb9, 0x1a,
	0x15, 0x8e, 0xc6, 0x0d, 0xd6, 0x33, 0x8a, 0x63, 0x25, 0xd3, 0x67, 0xd0, 0x0d, 0x23, 0x31, 0x09,
	0x23, 0x11, 0xf2, 0x48, 0xf4, 0x9b, 0x68, 0x79, 0x4f, 0x5b, 0xe6, 0x0e, 0xc6, 0x0d, 0x06, 0x61,
	0x24, 0xce, 0xb4, 0x44, 0x0f, 0xa0, 0x93, 0x58, 0xb4, 0xd0, 0x62, 0x2b, 0xb5, 0x30, 0xe8, 0xe4,
	0x9c, 0x3e, 0x86, 0x0d, 0x27, 0x58, 0x2e, 0x3d, 0xd9, 0xb7, 0x10, 0xd9, 0xd3, 0x48, 0xad, 0x1b,
	0x37, 0x98, 0x39, 0xa5, 0x4f, 0x01, 0x1c, 0x57, 0x38, 0x97, 0x61, 0xe0, 0xf9, 0xb2, 0xdf, 0x46,
	0xec, 0x8e, 0xc1, 0xa6, 0x7a, 0x45, 0x23, 0x93, 0x14, 0xf9, 0x6b, 0x4f, 0xac, 0x27, 0x8e, 0xcb,
	0xfd, 0xb9, 0xe8, 0x6f, 0xe4, 0xc9, 0xe7, 0x0e, 0x94, 0x95, 0x12, 0x4f, 0x50, 0xa2, 0x1f, 0xc2,
	0xa6, 0x2f, 0xd6, 0x13, 0xa5, 0xe9, 0x77, 0xd0, 0x64, 0x5b, 0x9b, 0x24, 0x5a, 0x45, 0xdf, 0x17,
	0xeb, 0x97, 0x9e, 0x58, 0xd3, 0x6f, 0xe0, 0xfe, 0x85, 0x90, 0x8e, 0x3b, 0x29, 0xde, 0xf0, 0x26,
	0xda, 0x3d, 0xd0, 0x76, 0x35, 0x80, 0x71, 0x83, 0xdd, 0x43, 0x35, 0xcb, 0x5f, 0xf6, 0x57, 0xb0,
	0x1b, 0x09, 0xb9, 0x8a, 0xfc, 0x92, 0x37, 0xfb, 0xae, 0x7c, 0x51, 0x6d, 0x52, 0x70, 0x74, 0x0c,
	0x3b, 0x6b, 0xee, 0xcb, 0x49, 0x3e, 0x7a, 0x40, 0x27, 0x6f, 0x69, 0x27, 0xe5, 0xd3, 0x71, 0x83,
	0x6d, 0x2b, 0xdd, 0xcb, 0xf4, 0x1a, 0x8e, 0x6d, 0xe8, 0x84, 0xfc, 0x66, 0x11, 0xf0, 0xd9, 0xf0,
	0x67, 0x02, 0x1d, 0xf3, 0x5b, 0x7a, 0x04, 0x76, 0x5a, 0x6b, 0xa6, 0x90, 0x06, 0x23, 0x5d, 0x8d,
	0xa3, 0xa4, 0x1a, 0x47, 0xdf, 0x27, 0x08, 0x96, 0x81, 0x69, 0x3f, 0x75, 0x88, 0x65, 0xd4, 0x63,
	0x89, 0x48, 0x1f, 0x02, 0x44, 0x22, 0x5c, 0x78, 0x0e, 0x9f, 0x78, 0x33, 0xac, 0x18, 0x8b, 0xd9,
	0x46, 0xf3, 0xf5, 0x8c, 0xbe, 0x0d, 0x76, 0xec, 0xcd, 0x7d, 0x2e, 0x57, 0x91, 0xc0, 0x2a, 0xe9,
	0xb1, 0x4c, 0x31, 0xfc, 0x8b, 0x14, 0x4a, 0x94, 0x52, 0xb0, 0x30, 0x75, 0x04, 0xdd, 0xe0, 0x37,
	0xdd, 0x87, 0x37, 0x62, 0xc5, 0xdf, 0x77, 0xc4, 0xc4, 0x5f, 0x2d, 0xa7, 0x22, 0x42, 0x0a, 0x16,
	0xdb, 0x4e, 0xd4, 0xa7, 0xa8, 0xa5, 0xef, 0x42, 0x0f, 0xef, 0x75, 0x32, 0xf3, 0xe6, 0x22, 0x96,
	0xc8, 0xc5, 0x66, 0x5d, 0xd4, 0x7d, 0x81, 0x2a, 0x7a, 0x54, 0xee, 0x26, 0xeb, 0xd6, 0xec, 0x94,
	0x7a, 0xa9, 0x18, 0x66, 0xbb, 0x1c, 0xe6, 0x1e, 0x74, 0xb9, 0x94, 0xea, 0xb2, 0xa4, 0x17, 0xf8,
	0x58, 0xad, 0x3d, 0x96, 0x57, 0x0d, 0x7f, 0x25, 0x69, 0x5f, 0xfd, 0xef, 0x61, 0x16, 0xc9, 0x5a,
	0xaf, 0x20, 0xdb, 0xae, 0x92, 0xfd, 0x85, 0x24, 0x9d, 0xfd, 0x9a, 0x71, 0xad, 0xb9, 0xd8, 0x53,
	0x80, 0xe9, 0x22, 0x70, 0x2e, 0x27, 0x9e, 0x7f, 0x11, 0xe0, 0x1f, 0x51, 0x32, 0xbc, 0x34, 0xed,
	0x2e, 0xea, 0x0c, 0xa9, 0x87, 0x89, 0x81, 0xcb, 0x63, 0xd7, 0x94, 0xb3, 0x8d, 0x9a, 0x31, 0x8f,
	0xdd, 0xe1, 0x2c, 0xff, 0x58, 0xd5, 0x85, 0x4a, 0x6a, 0x43, 0x2d, 0xc6, 0xd1, 0x2c, 0xc7, 0xb1,
	0x0d, 0x4d, 0xd3, 0x1e, 0x36, 0x6b, 0x7a, 0xb3, 0xe1, 0xb7, 0xd5, 0x2e, 0xaf, 0xbd, 0xea, 0x5d,
	0x68, 0xfb, 0x81, 0xef, 0x08, 0xc3, 0x53, 0x0b, 0x39, 0x6f, 0x16, 0x7a, 0xfb, 0xbd, 0x5d, 0x78,
	0x2d, 0x6b, 0x3d, 0xf5, 0x80, 0xb8, 0x86, 0x17, 0x71, 0xe9, 0x3e, 0x58, 0x4e, 0x2c, 0x54, 0x46,
	0x5a, 0x59, 0x03, 0xe4, 0x5c, 0x8c, 0x4e, 0x18, 0x02, 0xe8, 0x13, 0xb0, 0x42, 0x05, 0xb4, 0x10,
	0xb8, 0x5b, 0x05, 0x9e, 0x9d, 0x33, 0x44, 0x28, 0xe4, 0x95, 0x42, 0xb6, 0xef, 0x42, 0x2a, 0x04,
	0x3d, 0x00, 0x6b, 0xaa, 0x90, 0x9b, 0x88, 0x7c, 0xb3, 0x8a, 0x7c, 0x21, 0x25, 0x43, 0x08, 0xfd,
	0x00, 0xac, 0xb5, 0x82, 0x76, 0x11, 0x7a, 0xcb, 0x0b, 0xc8, 0x10, 0x53, 0x4a, 0xc1, 0xc6, 0x9d,
	0x4f, 0x51, 0xa7, 0xf4, 0x14, 0x95, 0x0b, 0x0d, 0x2a, 0x85, 0x46, 0x1f, 0xc0, 0x66, 0xb0, 0x98,
	0xe9, 0xd9, 0xd2, 0x43, 0xe7, 0x9d, 0x60, 0x31, 0x53, 0xaf, 0xee, 0xe0, 0x33, 0x20, 0x27, 0xf4,
	0x93, 0xc2, 0x94, 0x23, 0xf5, 0x53, 0x2e, 0x3f, 0xe3, 0x06, 0xbf, 0x11, 0x68, 0x9e, 0x9d, 0xab,
	0x1c, 0xc7, 0xe2, 0xea, 0x34, 0x30, 0xe9, 0xd2, 0x02, 0xdd, 0xcf, 0xe6, 0x70, 0x13, 0x83, 0x2f,
	0xce, 0xe1, 0x6c, 0x0a, 0xbf, 0x97, 0x4e, 0x61, 0x9d, 0xcc, 0xc2, 0x14, 0x4e, 0x67, 0x30, 0xa6,
	0x5f, 0x3f, 0xc0, 0xc4, 0x55, 0x12, 0x37, 0x8d, 0x4f, 0x78, 0xa5, 0x4d, 0x37, 0xaa, 0x6d, 0x9a,
	0x54, 0x54, 0x27, 0xab, 0xa8, 0xc1, 0x39, 0xb4, 0x5e, 0x48, 0x79, 0x5b, 0xd9, 0xea, 0x90, 0x9a,
	0xf9, 0x90, 0x4a, 0x77, 0xdc, 0xaa, 0x36, 0xf3, 0x21, 0xb4, 0xcf, 0xce, 0x55, 0x2e, 0x1f, 0x43,
	0x4b, 0xa5, 0x9d, 0xdc, 0x51, 0x4b, 0x0a, 0x30, 0xfc, 0x9b, 0x64, 0x13, 0xbf, 0x96, 0xc9, 0xfb,
	0x60, 0x5d, 0x2b, 0x4f, 0xfa, 0x0e, 0xab, 0x0b, 0x04, 0xc3, 0x63, 0xfa, 0x11, 0x58, 0x3f, 0x65,
	0xfd, 0xd0, 0x2f, 0x2e, 0x0d, 0xa3, 0x1f, 0x63, 0x21, 0xbf, 0xf4, 0x65, 0x74, 0xc3, 0x10, 0xf5,
	0x9f, 0x1f, 0xd8, 0xc1, 0xe7, 0x60, 0xa7, 0x3e, 0xe9, 0x0e, 0xb4, 0x2e, 0xc5, 0x8d, 0x61, 0xad,
	0x3e, 0xd5, 0xf5, 0x5d, 0xf3, 0xc5, 0x4a, 0x77, 0xbd, 0xcd, 0xb4, 0xf0, 0xbc, 0x79, 0x44, 0x86,
	0x3f, 0xd4, 0xee, 0x2c, 0x95, 0x0c, 0x92, 0x57, 0x3d, 0xb4, 0xe5, 0x07, 0x6a, 0xf8, 0xac, 0x34,
	0x1a, 0xe9, 0x23, 0x68, 0x27, 0x1b, 0x67, 0xae, 0xfa, 0x0c, 0x86, 0xe9, 0xb3, 0xe1, 0x9f, 0x04,
	0xb6, 0xf4, 0x8f, 0x93, 0x85, 0xf5, 0x20, 0x5d, 0x37, 0x4c, 0x0b, 0x14, 0x0d, 0xd5, 0xfe, 0x95,
	0xac, 0x23, 0x95, 0xdd, 0xb6, 0xf9, 0xef, 0x77, 0xdb, 0x47, 0xd0, 0x53, 0xa8, 0xe4, 0xb7, 0xba,
	0x96, 0xc6, 0x0d, 0xd6, 0x55, 0xda, 0xef, 0x0c, 0x97, 0x8f, 0xc1, 0x76, 0x82, 0x65, 0xb8, 0xe0,
	0xaa, 0x21, 0xad, 0x7a, 0x36, 0x19, 0x22, 0xbf, 0x35, 0xed, 0xc1, 0xe6, 0x52, 0x48, 0x3e, 0xe3,
	0x92, 0xd7, 0xb7, 0xe7, 0x74, 0x03, 0x17, 0xa6, 0x4f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x74,
	0x46, 0x71, 0x14, 0xe4, 0x0b, 0x00, 0x00,
}
